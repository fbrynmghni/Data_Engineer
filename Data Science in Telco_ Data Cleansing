{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["nnkokaZaWTLH","mnxRAANEWWIY"],"authorship_tag":"ABX9TyNZwFVvUE5bf39cMLa1NE8i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Latar Belakang\n","\n","DQLab Telco merupakan perusahaan Telco yang sudah mempunyai banyak cabang tersebar dimana-mana. Sejak berdiri pada tahun 2019, DQLab Telco konsisten untuk memperhatikan customer experience-nya sehingga tidak akan ditinggalkan pelanggan.\n","\n","Walaupun baru berumur 1 tahun lebih sedikit, DQLab Telco sudah mempunyai banyak pelanggan yang beralih langganan ke kompetitor. Pihak management ingin mengurangi **jumlah pelanggan yang beralih (churn)** dengan menggunakan machine learning.\n","\n","Oleh karena itu, tim Data Scientist diminta untuk mempersiapkan data sekaligus membuat model prediksi yang tepat untuk menentukan pelanggan akan berhenti berlangganan (churn) atau tidak."],"metadata":{"id":"nnkokaZaWTLH"}},{"cell_type":"markdown","source":["# Tugas dan Langkah\n","\n","Sebagai seorang data scientist, kamu diminta untuk menyiapkan data sebelum dilakukan permodelan.\n","\n","Pada tugas kali ini, kamu akan melakukan ***Data Preprocessing*** (*Data Cleansing*) bulan lalu, yakni Juni 2020.\n","\n","Langkah yang akan dilakukan adalah:\n","\n","1.   Mencari ID pelanggan (Nomor telepon) yang valid\n","1.   Mengatasi data-data yang masih kosong (*Missing Values*)\n","2.   Mengatasi Nilai-Nilai Pencilan (*Outlier*) dari setiap Variable\n","2.   Menstandardisasi Nilai dari Variable\n","\n"],"metadata":{"id":"mnxRAANEWWIY"}},{"cell_type":"markdown","source":["# Library yang Digunakan\n","\n","*Package* yang digunakan:\n","\n","**1.   Pandas**\n","\n","**Pandas** (*Python for Data Analysis*)   adalah library Python yang fokus untuk proses analisis data seperti manipulasi data, persiapan data, dan pembersihan data.\n","\n","*   `read_csv()`, digunakan untuk membaca file csv\n","*   `str.match()`, digunakan untuk mencocokan dengan karakter tertentu\n","*   `drop()`, digunakan untuk menghapus\n","*   `count()`, digunakan untuk menghitung masing-masing variable\n","*   `drop_duplicates()`, digunakan untuk menghapus data duplicate rows\n","*   `fillna()`, digunakan untuk mengisi dengan nilai tertentu\n","*   `quantile()`, digunakan untuk melihat quantile ke tertentu\n","*   `mask()`, mengganti nilai tertentu jika kondisi memenuhi\n","*   `astype()`, mengubah tipe data\n","*   `value_counts()`, digunakan untuk menghitung unik dari kolom\n","*   `sort_values()`, digunakan untuk sort values\n","*   `isnull()`, digunakan untuk mendeteksi missing values\n","*   `dropna()`, digunakan untuk menghapus missing values\n","*   `replace()`, digunakan untuk mengganti nilai\n","\n","\n","\n","**2.   Matplotlib**\n","\n","**Matplotlib** adalah library Python yang fokus pada visualisasi data seperti membuat plot grafik. Matplotlib dapat digunakan dalam skrip Python, Python dan IPython shell, server aplikasi web, dan beberapa toolkit *graphical user interface* (GUI) lainnya.\n","\n","*   `figure()`, digunakan untuk membuat figure gambar baru\n","\n","\n","\n","\n","**3.   Seaborn**\n","\n","Seaborn membangun di atas Matplotlib dan memperkenalkan tipe plot tambahan. Ini juga membuat plot Matplotlib tradisional Anda terlihat sedikit lebih cantik.\n","\n","*   `box_plot()`, digunakan untuk membuat box plot"],"metadata":{"id":"2Qr9PtpCXWwW"}},{"cell_type":"markdown","source":["## Data yang Digunakan\n","\n","Untuk dataset yang digunakan sudah disediakan dalam format csv, silahkan baca melalui fungsi pandas di python \n","\n","`df_load = pd.read_csv('https://storage.googleapis.com/dqlab-dataset/dqlab_telco.csv')`\n","\n","Untuk detail datanya adalah sebagai berikut:\n","\n","*   `UpdatedAt`, Periode of Data taken\n","*   `customerID`, Customer ID\n","*   `gender`, Whether the customer is a male or a female **(Male, Female)**\n","*   `SeniorCitizen`, Whether the customer is a senior citizen or not **(1, 0)**\n","*   `Partner`, Whether the customer has a partner or not **(Yes, No)**\n","*   `Dependents`, Whether the customer has dependents or not **(Yes, No)**\n","*   `tenure`, Number of months the customer has stayed with the company\n","*   `PhoneService`, Whether the customer has a phone service or not **(Yes, No)**\n","*   `MultipleLines`, Whether the customer has multiple lines or not **(Yes, No, No phone service)**\n","*   `InternetService`, Customer’s internet service provider **(DSL, Fiber optic, No)**\n","*   `OnlineSecurity`, Whether the customer has online security or not **(Yes, No, No internet service)**\n","*   `OnlineBackup`, Whether the customer has online backup or not **(Yes, No, No internet service)**\n","*   `DeviceProtection`, Whether the customer has device protection or not **(Yes, No, No internet service)**\n","*   `TechSupport`, Whether the customer has tech support or not **(Yes, No, No internet service)**\n","*   `StreamingTV`, Whether the customer has streaming TV or not **(Yes, No, No internet service)**\n","*   `StreamingMovies`, Whether the customer has streaming movies or not **(Yes, No, No internet service)**\n","*   `Contract`, The contract term of the customer **(Month-to-month, One year, Two year)**\n","*   `PaperlessBilling`, Whether the customer has paperless billing or not **(Yes, No)**\n","*   `PaymentMethod`, The customer’s payment method **(Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))**\n","*   `MonthlyCharges`, The amount charged to the customer monthly\n","*   `TotalCharges`, The total amount charged to the customer\n","*   `Churn`, Whether the customer churned or not **(Yes or No)**\n","\n","\n","\n","\n"],"metadata":{"id":"hOPzPCsdZR4z"}},{"cell_type":"markdown","source":["## Import Library"],"metadata":{"id":"2pLXSwrZXvoj"}},{"cell_type":"code","source":["import pandas as pd\n","pd.options.display.max_columns = 50\n","\n","df_load = pd.read_csv('https://storage.googleapis.com/dqlab-dataset/dqlab_telco.csv')\n","\n","#Tampilkan jumlah baris dan kolom\n","print(df_load.shape)\n","\n","#Tampilkan 5 data teratas\n","print(df_load.head(5))\n","\n","#Jumlah ID yang unik\n","print(df_load.customerID.nunique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"azS1ZD40X3TS","executionInfo":{"status":"ok","timestamp":1680697905162,"user_tz":-420,"elapsed":3104,"user":{"displayName":"Febryan Mughni","userId":"16192003804180622137"}},"outputId":"47fecc28-dfdb-439f-b887-c4b49e926d3e"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(7113, 22)\n","   UpdatedAt   customerID  gender  SeniorCitizen Partner Dependents  tenure  \\\n","0     202006  45759018157  Female              0     Yes         No     1.0   \n","1     202006  45557574145    Male              0      No         No    34.0   \n","2     202006  45366876421    Male              0      No         No     2.0   \n","3     202006  45779536532    Male              0      No         No    45.0   \n","4     202006  45923787906  Female              0      No         No     2.0   \n","\n","  PhoneService     MultipleLines InternetService OnlineSecurity OnlineBackup  \\\n","0           No  No phone service             DSL             No          Yes   \n","1          Yes                No             DSL            Yes           No   \n","2          Yes                No             DSL            Yes          Yes   \n","3           No  No phone service             DSL            Yes           No   \n","4          Yes                No     Fiber optic             No           No   \n","\n","  DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n","0               No          No          No              No  Month-to-month   \n","1              Yes          No          No              No        One year   \n","2               No          No          No              No  Month-to-month   \n","3              Yes         Yes          No              No        One year   \n","4               No          No          No              No  Month-to-month   \n","\n","  PaperlessBilling              PaymentMethod  MonthlyCharges  TotalCharges  \\\n","0              Yes           Electronic check           29.85         29.85   \n","1               No               Mailed check           56.95       1889.50   \n","2              Yes               Mailed check           53.85        108.15   \n","3               No  Bank transfer (automatic)           42.30       1840.75   \n","4              Yes           Electronic check           70.70        151.65   \n","\n","  Churn  \n","0    No  \n","1    No  \n","2   Yes  \n","3    No  \n","4   Yes  \n","7017\n"]}]},{"cell_type":"markdown","source":["## Memfilter ID Number Pelanggan Format Tertentu\n","\n","Mencari format ID Number (Phone Number) Pelanggan `customerID` yang benar, dengan kriteria:\n","\n","*   Panjang karakter adalah 11-12.\n","*   Terdiri dari angka Saja, tidak diperbolehkan ada karakter selain angka\n","*   Diawali dengan angka 45 2 digit pertama.\n","\n"],"metadata":{"id":"zo4o3ZQUbZ5d"}},{"cell_type":"code","source":["# Membuat kolom valid_id dengan Boolean\n","df_load['valid_id'] = df_load['customerID'].astype(str).str.match(r'(45\\d{9,10})')\n","\n","# Select data yang hanya memiliki kolom 'valid_id' bernilai True dan Drop kolom 'valid_id\n","df_load = df_load[df_load['valid_id'] == True].drop('valid_id', axis=1)\n","\n","# Jumlah customerID setelah dilakukan filtering\n","print('Hasil jumlah ID Customer yang terfilter adalah', df_load['customerID'].count())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"en1dkIRTcOiv","executionInfo":{"status":"ok","timestamp":1680699274465,"user_tz":-420,"elapsed":869,"user":{"displayName":"Febryan Mughni","userId":"16192003804180622137"}},"outputId":"68c5f77a-e8c7-42c5-f63b-0b472bdb5172"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Hasil jumlah ID Customer yang terfilter adalah 7006\n"]}]},{"cell_type":"markdown","source":["## Memfilter Duplikasi ID Number Pelanggan"],"metadata":{"id":"NdUqqomJgACg"}},{"cell_type":"code","source":["# Drop Duplicate Rows\n","df_load.drop_duplicates()\n","\n","# Drop duplicate ID sorted by Periode\n","df_load = df_load.sort_values('UpdatedAt', ascending=False).drop_duplicates('customerID')\n","print('Hasil jumlah ID Customer yang sudah dihilangkan duplikasinya (distinct) adalah',df_load['customerID'].count())"],"metadata":{"id":"znsxeUXYgFc4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Mengatasi Missing Values dengan Penghapusan Rows"],"metadata":{"id":"i__JLrqylEHD"}},{"cell_type":"code","source":["df_load['Churn'].isnull().sum()\n","print('Total missing values data dari kolom Churn', df_load['Churn'].isnull().sum())\n","\n","# Dropping all Rows with spesific column (churn)\n","df_load.dropna(subset=['Churn'],inplace=True)\n","print('Total Rows dan kolom Data setelah dihapus data Missing Values adalah', df_load.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X_7dOjGylFGR","executionInfo":{"status":"ok","timestamp":1680701692655,"user_tz":-420,"elapsed":32,"user":{"displayName":"Febryan Mughni","userId":"16192003804180622137"}},"outputId":"7a1e7311-2fd2-4118-8dc5-a3209233a2e1"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Total missing values data dari kolom Churn 43\n","Total Rows dan kolom Data setelah dihapus data Missing Values adalah (6963, 22)\n"]}]},{"cell_type":"markdown","source":["## Mengatasi Missing Values dengan Pengisian Nilai tertentu\n","\n","Nilai Tenure yang kosong, diisi dengan '11'"],"metadata":{"id":"HK9nyR7UothJ"}},{"cell_type":"code","source":["print('Status Missing Values :',df_load.isnull().values.any())\n","print('\\nJumlah Missing Values masing-masing kolom, adalah:')\n","print(df_load.isnull().sum().sort_values(ascending=False))\n","\n","# handling missing values Tenure fill with 11\n","df_load['tenure'].fillna(11, inplace=True)\n","\n","# Handling missing values num vars (except Tenure)\n","for col_name in list(['MonthlyCharges','TotalCharges']):\n","    median = df_load[col_name].median()\n","    df_load[col_name].fillna(median, inplace=True)\n","    \n","print('\\nJumlah Missing Values setelah di imputer datanya, adalah:')\n","print(df_load.isnull().sum().sort_values(ascending=False))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MrNqntvEoxMk","executionInfo":{"status":"ok","timestamp":1680702056260,"user_tz":-420,"elapsed":751,"user":{"displayName":"Febryan Mughni","userId":"16192003804180622137"}},"outputId":"af585292-be83-4c47-9539-056064468339"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Status Missing Values : True\n","\n","Jumlah Missing Values masing-masing kolom, adalah:\n","tenure              99\n","MonthlyCharges      26\n","TotalCharges        15\n","UpdatedAt            0\n","DeviceProtection     0\n","PaymentMethod        0\n","PaperlessBilling     0\n","Contract             0\n","StreamingMovies      0\n","StreamingTV          0\n","TechSupport          0\n","OnlineBackup         0\n","customerID           0\n","OnlineSecurity       0\n","InternetService      0\n","MultipleLines        0\n","PhoneService         0\n","Dependents           0\n","Partner              0\n","SeniorCitizen        0\n","gender               0\n","Churn                0\n","dtype: int64\n","\n","Jumlah Missing Values setelah di imputer datanya, adalah:\n","UpdatedAt           0\n","customerID          0\n","TotalCharges        0\n","MonthlyCharges      0\n","PaymentMethod       0\n","PaperlessBilling    0\n","Contract            0\n","StreamingMovies     0\n","StreamingTV         0\n","TechSupport         0\n","DeviceProtection    0\n","OnlineBackup        0\n","OnlineSecurity      0\n","InternetService     0\n","MultipleLines       0\n","PhoneService        0\n","tenure              0\n","Dependents          0\n","Partner             0\n","SeniorCitizen       0\n","gender              0\n","Churn               0\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["## Mendeteksi adanya Outlier (Boxplot)\n","\n","Mendeteksi pencilan dari suatu nilai (outlier) salah satunya bisa melihat plot dari data tersebut menggunakan boxplot. "],"metadata":{"id":"S5ZVHGFL-Q6E"}},{"cell_type":"code","source":["# Creating Box Plot\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Misal untuk kolom tenure\n","plt.figure()\n","sns.boxplot(x=df_load['tenure'])\n","plt.show()\n","# Misal untuk kolom MonthlyCharges\n","plt.figure()\n","sns.boxplot(x=df_load['MonthlyCharges'])\n","plt.show()\n","# Misal untuk kolom TotalCharges\n","plt.figure()\n","sns.boxplot(x=df_load['TotalCharges'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"X7WfLsqs-jem","executionInfo":{"status":"ok","timestamp":1680707836633,"user_tz":-420,"elapsed":2582,"user":{"displayName":"Febryan Mughni","userId":"16192003804180622137"}},"outputId":"aca5b886-1c7d-4ee8-f6f2-3380a1bc59e5"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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LoyPfexj72kN1157bfUxbW1tcf3118ef//znaGlpiYiIww8/PJYsWRI//elP49RTT33f5wx0DYEA+5nHHnss7rvvvujfv3/a9txzz3UIhF0NGzYsNm3a9J5/3gknnFC9vWbNmnjttddSZGzfvj0mTJjwno8NdB+BAPuZbdu2xTnnnBPf//7307Zhw4ZVb/ft27fDtkqlEu3t7RER0avXm1cfSynV7W+88cZuf94BBxzQ4WdHRNx1111x6KGHdtivvr7+vZwG0M0EAvRwdXV1sXPnzur3xx9/fPz2t7+N0aNHR58+e/eP+ODBgyMiYv369dX/8t/1DYt7Mnbs2Kivr49169a5nAA9nECAHm706NGxdOnSWLt2bfTv3z+mT58eP/vZz+L888+vfkphzZo1MXfu3Lj55pujd+/e73jMxsbGOPnkk2P27NkxZsyY2LRpU3z7299+x8cNGDAgrrjiirj00kujvb09PvzhD8err74a999/fzQ1NcW0adM645SBLuBTDNDDXXHFFdG7d+8YO3ZsDB48OLZv3x73339/7Ny5M84444w47rjjYsaMGdHc3Fy9dPBu3HLLLbFjx46YOHFizJgxI6677rp39bjvfe97cfXVV8esWbPiAx/4QJx11llx1113xZgxY/b2FIFuUCm7XmQEAAivIAAAuyEQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAyf8H1U/XDTgE9WcAAAAASUVORK5CYII=\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["Q1 = (df_load[['tenure','MonthlyCharges','TotalCharges']]).quantile(0.25)\n","Q3 = (df_load[['tenure','MonthlyCharges','TotalCharges']]).quantile(0.75)\n","\n","IQR = Q3 - Q1\n","maximum = Q3 + (1.5*IQR)\n","print('Nilai Maximum dari masing-masing Variable adalah:' )\n","print(maximum)\n","\n","minimum = Q1 - (1.5*IQR)\n","print('\\nNilai Minimum dari masing-masing Variable adalah:' )\n","print(minimum)\n","\n","more_than\t=(df_load > maximum)\n","lower_than\t=(df_load < minimum)\n","df_load\t\t= df_load.mask(more_than, maximum, axis=1)\n","df_load\t\t= df_load.mask(lower_than, minimum, axis=1)\n","print('\\nPersebaran data setelah ditangani Outlier: ')\n","print(df_load[['tenure','MonthlyCharges','TotalCharges']].describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tb6esli9_oCr","executionInfo":{"status":"ok","timestamp":1680708713669,"user_tz":-420,"elapsed":1166,"user":{"displayName":"Febryan Mughni","userId":"16192003804180622137"}},"outputId":"fa8b9cf6-e8a2-48b4-a64c-364afb4e8f8f"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Nilai Maximum dari masing-masing Variable adalah:\n","tenure             124.00\n","MonthlyCharges     169.95\n","TotalCharges      8896.15\n","dtype: float64\n","\n","Nilai Minimum dari masing-masing Variable adalah:\n","tenure             -60.00\n","MonthlyCharges     -43.65\n","TotalCharges     -4685.45\n","dtype: float64\n","\n","Persebaran data setelah ditangani Outlier: \n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-8-2f64a43d9cdd>:13: FutureWarning: Automatic reindexing on DataFrame vs Series comparisons is deprecated and will raise ValueError in a future version. Do `left, right = left.align(right, axis=1, copy=False)` before e.g. `left == right`\n","  more_than\t=(df_load > maximum)\n","<ipython-input-8-2f64a43d9cdd>:14: FutureWarning: Automatic reindexing on DataFrame vs Series comparisons is deprecated and will raise ValueError in a future version. Do `left, right = left.align(right, axis=1, copy=False)` before e.g. `left == right`\n","  lower_than\t=(df_load < minimum)\n"]},{"output_type":"stream","name":"stdout","text":["            tenure  MonthlyCharges  TotalCharges\n","count  6963.000000     6963.000000   6963.000000\n","mean     32.433721       64.996022   2286.756592\n","std      24.583319       30.061184   2266.591565\n","min       0.000000        0.000000     19.000000\n","25%       9.000000       36.450000    407.650000\n","50%      29.000000       70.450000   1400.700000\n","75%      55.000000       89.850000   3803.050000\n","max     124.000000      169.950000   8896.150000\n"]}]},{"cell_type":"markdown","source":["## Mendeteksi Nilai yang tidak Standar"],"metadata":{"id":"KSoXIheIE1fu"}},{"cell_type":"code","source":["for col_name in list(['gender','SeniorCitizen','Partner','Dependents','PhoneService','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod','Churn']):\n","    print('\\nUnique Values Count \\033[1m' + 'Before Standardized \\033[0m Variable',col_name)\n","    print(df_load[col_name].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vv7_XU-JGwAL","executionInfo":{"status":"ok","timestamp":1680709717962,"user_tz":-420,"elapsed":482,"user":{"displayName":"Febryan Mughni","userId":"16192003804180622137"}},"outputId":"972bdbd1-5b88-4ca1-abfe-66c10addd286"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable gender\n","Male         3503\n","Female       3440\n","Wanita         14\n","Laki-Laki       6\n","Name: gender, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable SeniorCitizen\n","0    5833\n","1    1130\n","Name: SeniorCitizen, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable Partner\n","No     3600\n","Yes    3363\n","Name: Partner, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable Dependents\n","No     4878\n","Yes    2065\n","Iya      20\n","Name: Dependents, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable PhoneService\n","Yes    6293\n","No      670\n","Name: PhoneService, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable MultipleLines\n","No                  3353\n","Yes                 2940\n","No phone service     670\n","Name: MultipleLines, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable InternetService\n","Fiber optic    3060\n","DSL            2394\n","No             1509\n","Name: InternetService, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable OnlineSecurity\n","No                     3459\n","Yes                    1995\n","No internet service    1509\n","Name: OnlineSecurity, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable OnlineBackup\n","No                     3050\n","Yes                    2404\n","No internet service    1509\n","Name: OnlineBackup, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable DeviceProtection\n","No                     3055\n","Yes                    2399\n","No internet service    1509\n","Name: DeviceProtection, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable TechSupport\n","No                     3436\n","Yes                    2018\n","No internet service    1509\n","Name: TechSupport, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable StreamingTV\n","No                     2778\n","Yes                    2676\n","No internet service    1509\n","Name: StreamingTV, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable StreamingMovies\n","No                     2749\n","Yes                    2705\n","No internet service    1509\n","Name: StreamingMovies, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable Contract\n","Month-to-month    3826\n","Two year          1674\n","One year          1463\n","Name: Contract, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable PaperlessBilling\n","Yes    4118\n","No     2845\n","Name: PaperlessBilling, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable PaymentMethod\n","Electronic check             2339\n","Mailed check                 1597\n","Bank transfer (automatic)    1521\n","Credit card (automatic)      1506\n","Name: PaymentMethod, dtype: int64\n","\n","Unique Values Count \u001b[1mBefore Standardized \u001b[0m Variable Churn\n","No       5125\n","Yes      1829\n","Churn       9\n","Name: Churn, dtype: int64\n"]}]},{"cell_type":"markdown","source":["## Menstandarisasi Variable Kategorik"],"metadata":{"id":"zyTS-eybG-tD"}},{"cell_type":"code","source":["f_load = df_load.replace(['Wanita','Laki-Laki','Churn','Iya'],['Female','Male', 'Yes', 'Yes'])\n","\n","#Loop\n","for col_name in list(['gender', 'Dependents', 'Churn']):\n","\tprint('\\nUnique Values Count \\033[1m' + 'After Standardized \\033[0mVariable',col_name)\n","\tprint(df_load[col_name].value_counts())"],"metadata":{"id":"c7w8pwC_G_zd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Uva-znYEJMW-"},"execution_count":null,"outputs":[]}]}